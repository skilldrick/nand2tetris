// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
  field Array str;
  field int length;
  field int arrayLength;

  /** constructs a new empty string with a maximum length of maxLength
   *  and initial length of 0. */
  constructor String new(int maxLength) {
    if (maxLength = 0) {
      let arrayLength = 1; // Arrays can't be empty but strings can
    } else {
      let arrayLength = maxLength;
    }
    let str = Array.new(arrayLength);
    let length = 0;
    
    return this;
  }

  /** Disposes this string. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  /** Returns the current length of this string. */
  method int length() {
    return length;
  }

  /** Returns the character at the j-th location of this string. */
  method char charAt(int j) {
    return str[j];
  }

  /** Sets the character at the j-th location of this string to c. */
  method void setCharAt(int j, char c) {
    let str[j] = c;
    return this;
  }

  /** Appends c to this string's end and returns this string. */
  method String appendChar(char c) {
    let str[length] = c;
    let length = length + 1;
    return this;
  }

  /** Erases the last character from this string. */
  method void eraseLastChar() {
    let length = length - 1;
    let str[length] = 0;
    return this;
  }

  /** Returns the integer value of this string, 
   *  until a non-digit character is detected. */
  method int intValue() {
    var char c;
    var int i, powerOfTen, intValue;
    var Array a;
    var boolean isNegative;
    let i = 0;
    let c = str[i];
    let a = Array.new(length);

    if (c = 45) { // -
      let isNegative = true;
      let i = i + 1;
      let c = str[i];
    }

    while ((c > 47) & (c < 58)) {
      let a[i] = c - 48;
      let i = i + 1;
      let c = str[i];
    }

    let powerOfTen = 1;
    while (i > 0) {
      let i = i - 1;
      let intValue = intValue + a[i] * powerOfTen;
      let powerOfTen = powerOfTen * 10;
    }

    if (isNegative) {
      return -intValue;
    } else {
      return intValue;
    }
  }

  /** Sets this string to hold a representation of the given value. */
  method void setInt(int val) {
    let length = 0;

    if (val < 0) {
      let val = -val;
      do appendChar(45); // '-'
    }

    do setIntRecursive(val);
    return;
  }

  method void setIntRecursive(int val) {
    var String s;
    var int i;
    var int lastDigit;

    let lastDigit = val % 10;
    let val = val / 10;

    if (val = 0) {
      do appendChar(lastDigit + 48);
    } else {
      do setIntRecursive(val); // recursively call through until we hit the first digit
      do appendChar(lastDigit + 48);
    }

    return;
  }

  /** Returns the new line character. */
  function char newLine() {
    return 128;
  }

  /** Returns the backspace character. */
  function char backSpace() {
    return 129;
  }

  /** Returns the double quote (") character. */
  function char doubleQuote() {
    return 34;
  }

  function int mod(int a, int b) {
    return a - ((a / b) * b);
  }
}
