// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
  static int baseAddress;
  static Array bits;
  static bool color;

  /** Initializes the Screen. */
  function void init() {
    var int i, x;

    let baseAddress = 16384;
    let bits = Array.new(16);
    let color = true;

    let i = 0;
    let x = 1;

    while (i < 16) {
      let bits[i] = x;
      let i = i + 1;
      let x = x * 2;
    }
    return;
  }

  /** Erases the entire screen. */
  function void clearScreen() {
    var int i;
    let i = 0;

    while (i < 8192) {
      do Memory.poke(baseAddress + i, 0);
      let i = i + 1;
    }

    return;
  }

  /** Sets the current color, to be used for all subsequent drawXXX commands.
   *  Black is represented by true, white by false. */
  function void setColor(boolean b) {
    let color = b;
    return;
  }

  /** Draws the (x,y) pixel, using the current color. */
  function void drawPixel(int x, int y) {
    var int address, value, bit;
    let address = baseAddress + (32 * y) + x / 16;
    let bit = x % 16;
    let value = Memory.peek(address);

    if (color) {
      let value = value | bits[bit];
    } else {
      let value = value & (~bits[bit]);
    }

    do Memory.poke(address, value);
    return;
  }

  function void draw16bits(int x, int y) {
    var int address, value, bit;
    let address = baseAddress + (32 * y) + x / 16;

    do Memory.poke(address, color);

    return;
  }

  /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
  function void drawLine(int x1, int y1, int x2, int y2) {
    if (y1 = y2) {
      do Screen.drawHorizontalLine(Math.min(x1, x2), Math.max(x1, x2), y1);
    } else {
      if (y1 < y2) {
        do Screen.drawDiagonalLine(x1, y1, x2, y2);
      } else {
        do Screen.drawDiagonalLine(x2, y2, x1, y1);
      }
    }
    return;
  }

  // includes vertical lines
  function void drawDiagonalLine(int x1, int y1, int x2, int y2) {
    var int a, b, diff, dx, dy;
    let a = 0;
    let b = 0;
    let diff = 0;
    let dx = Math.abs(x2 - x1);
    let dy = Math.abs(y2 - y1);

    while ((a < (dx + 1)) & (b < (dy + 1))) {
      do Screen.drawPixel(x1 + a, y1 + b);

      if (diff < 0) {
        if (x1 < x2) {
          let a = a + 1;
          let diff = diff + dy;
        } else {
          let a = a - 1;
          let diff = diff + dy;
        }
      } else {
        let b = b + 1;
        let diff = diff - dx;
      }
    }

    return;
  }

  function void drawHorizontalLine(int x1, int x2, int y) {
    var int i;

    let i = x1;
    while (i < x2) {
      if (((i % 16) = 0) & ((x2 - i) > 15)) {
        do Screen.draw16bits(i, y);
        let i = i + 16;
      } else {
        do Screen.drawPixel(i, y);
        let i = i + 1;
      }
    }

    return;
  }

  /** Draws a filled rectangle whose top left corner is (x1, y1)
   * and bottom right corner is (x2,y2), using the current color. */
  function void drawRectangle(int x1, int y1, int x2, int y2) {
    var int i;

    let i = y1;
    while (i < y2) {
      do Screen.drawHorizontalLine(x1, x2, i);
      let i = i + 1;
    }

    return;
  }

  /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
  function void drawCircle(int x, int y, int r) {
    var int dy, sqrtr2dy2, x1, x2, y1;

    let dy = -r;

    while (dy < r) {
      let sqrtr2dy2 = Math.sqrt((r * r) - (dy * dy));
      let x1 = x - sqrtr2dy2;
      let x2 = x + sqrtr2dy2;
      let y1 = y + dy;
      do Screen.drawLine(x1, y1, x2, y1);
      let dy = dy + 1;
    }

    return;
  }
}
