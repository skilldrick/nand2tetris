class Snake {
  // x and y represent 16px chunks
  field int x;
  field int y;
  field int direction;
  field int left, up, right, down;
  field boolean gameOver;


  constructor Snake new() {
    let x = 2;
    let y = 2;

    let left = 0;
    let up = 1;
    let right = 2;
    let down = 3;

    let gameOver = false;

    // 0 => left   (130)
    // 1 => up     (131)
    // 2 => right  (132)
    // 3 => down   (134)
    let direction = 2;

    return this;
  }

  method boolean getGameOver() {
    return gameOver;
  }

  method void updateDirection() {
    var int c;
    var int newDir;

    let c = Keyboard.keyPressed();

    if ((c > 129) & (c < 135)) {
      let newDir = c - 130;
    } else {
      let newDir = direction;
    }

    // only update direction if new drection is valid
    if (((direction = left) | (direction = right)) & ((newDir = up) | (newDir = down))) {
      let direction = newDir;
    }
    if (((direction = up) | (direction = down)) & ((newDir = left) | (newDir = right))) {
      let direction = newDir;
    }

    return;
  }

  method void update() {
    do updateDirection();

    if (direction = left) {
      let x = x - 1;
    } else {
      if (direction = up) {
        let y = y - 1;
      } else {
        if (direction = right) {
          let x = x + 1;
        } else {
          if (direction = down) {
            let y = y + 1;
          }
        }
      }
    }

    if ((x < 2) | (x > 29) | (y < 2) | (y > 13)) {
      let gameOver = true;
    }

    return;
  }

  method void draw() {
    var int location;
    var int memAddress;

    do Screen.setColor(true);

    // y needs to be multiplied by the height of the sprite
    // and the number of sprites per row because each wrap
    // only adds one pixel to y. x is already in "sprite
    // units" so doesn't need to be multiplied.
    let location = (y * 16 * 32) + x;
    let memAddress = 16384 + location;

    do Memory.poke(memAddress+160, 4915);
    do Memory.poke(memAddress+192, 16383);
    do Memory.poke(memAddress+224, 12287);
    do Memory.poke(memAddress+256, 32767);
    do Memory.poke(memAddress+288, 8191);
    do Memory.poke(memAddress+320, 3276);

    return;
  }

  method void clear() {
    var int screenX, screenY;

    let screenX = 16 * x;
    let screenY = 16 * y;

    // clear rect
    do Screen.setColor(false);
    do Screen.drawRectangle(screenX, screenY, screenX + 16, screenY + 16);

    return;
  }
}
