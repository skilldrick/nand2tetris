// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // if instruction[15] is true then C instruction else A instruction


    Mux16 (a=instruction, b=aluOutput, sel=instruction[15], out=aRegisterIn);

    /*
      C instruction bits to destination:
      05 04 03
      d1 d2 d3
      A  D  M
    */

    // A register should load for A instructions and for C instructions when d1 is set
    Not(in=instruction[15], out=isAInstruction);
    And(a=instruction[15], b=instruction[5], out=loadAFromALU);
    Or (a=loadAFromALU, b=isAInstruction, out=loadA);
    And(a=instruction[15], b=instruction[4], out=loadD);
    And(a=instruction[15], b=instruction[3], out=writeM);

    ARegister (in=aRegisterIn, load=loadA, out=aRegisterOut, out[0..14]=addressM);
    DRegister (in=aluOutput, load=loadD, out=aluXin);

    /*
      set up Y input of ALU
      this uses the (a) bit of the C instruction.
      if this bit is false, Y input is the output of the A register
      if this bit is true, Y input is the inM input
    */
    Mux16 (a=aRegisterOut, b=inM, sel=instruction[12], out=aluYin);

    /*
      C instruction bits to ALU input mapping:
      11 10 09 08 07 06
      c1 c2 c3 c4 c5 c6
      zx nx zy ny f  no
    */
    ALU(
      x=aluXin,
      y=aluYin,
      zx=instruction[11],
      nx=instruction[10],
      zy=instruction[9],
      ny=instruction[8],
      f=instruction[7],
      no=instruction[6],
      out=aluOutput,
      zr=zrOut,
      ng=ngOut
    );
}
